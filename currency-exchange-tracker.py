# -*- coding: utf-8 -*-
"""API-Based-Projects 2 - Justin Zarzuela

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMiDYMY-cLWcOTU5nPe7AL6fXEaEVfPv

# Project 2: Currency Exchange Rate Tracker
Objective: Build a Python application that retrieves currency exchange rates using an API and stores the data in an SQLite database.

Instructions:

Obtain an API key from a service like ExchangeRate-API. Allow the user to input two currency codes (e.g., USD, EUR). Use the requests package to fetch the exchange rate between the two currencies. Store the exchange rate, along with a timestamp and the currency codes, in an SQLite database. Ensure the script updates the database with new data if it is run multiple times. Challenge:

Implement a feature that allows users to retrieve the latest exchange rate from the database without making a new API call if the data is recent (e.g., within the last 10 minutes).
"""

import requests
import sqlite3
from datetime import datetime
from google.colab import userdata


apikey = userdata.get('cex')

base_currency = input("Enter base currency code):").upper()
target_currency = input("Enter target currency code:").upper()

url = "http://apilayer.net/api/live"

params = {
    'access_key': apikey,
    'currencies': target_currency,
    'source': base_currency,
    'format': 1
}

response = requests.get(url, params=params)
if response.status_code != 200:
  raise Exception(f"API requst failed: {response.status_code} {response.text}")

data = response.json()

if not data.get("success"):
  raise Exception(f"API error: {data}")

quote_key = f"{base_currency}{target_currency}"
exchange_rate = data["quotes"][quote_key]

timestamp = datetime.utcfromtimestamp(data["timestamp"]).isoformat()

print(f"Exchange rate {base_currency} > {target_currency}: {exchange_rate} at {timestamp}")

conn = sqlite3.connect("exchange_rates.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS rates (
  base_currency TEXT,
  target_currency TEXT,
  exchange_rate Real,
  timestamps TEXT,
  PRIMARY KEY (base_currency, target_currency, timestamps)
)
""")

cursor.execute("""
INSERT OR IGNORE INTO rates (base_currency, target_currency, exchange_rate, timestamps)
VALUES (?, ?, ?, ?)
""", (base_currency, target_currency, exchange_rate, timestamp))

conn.commit()
conn.close()

